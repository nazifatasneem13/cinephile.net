<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZ
        WiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAA
        ACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAA
        AChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAA
        AAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAA
        AAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAA
        E9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBu
        AGMALgAgADIAMAAxADb/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4R
        DgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQU
        FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCAH0Au4DASIAAhEBAxEB/8QAHgABAAIC
        AgMBAAAAAAAAAAAAAAgJBQYHCgIDBAH/xABQEAEAAQMCAwMHBQcQCgMAAAAAAgEDBAUGBxESCAkhEyIx
        MkFRYRRCUnFyFjM4YnWCshUjNlV2gYaRkpSisbPR0tMZJENTV2NzlaHCF0TB/8QAFAEBAAAAAAAAAAAA
        AAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AKqgAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHvxsW7mX42rFqd67L0Q
        hDqrX95Zf2KO6j+7XSNO3txmjlYWm5FI5GFtSzOtm9et1pzjPJnTzrdK/wC7jyn76x9VZ9w/4QbH4Vad
        b0/Z+09J25iwjy6dPw4WpS+Mp0p1Tr8ZVrUHWm+4fcf7Qap/Mrn+F+fcPuP9oNU/mVz/AAu0cA6uP3D7
        j/aDVP5lc/wsbmYd7AyJ4+TZuY9+3XpnauwrCca/GlfQut7UfbF3pvrfmXwO7N2DPX97edZ1rcmNy+T6
        RHn0zjC7XzITj865XwhXwjzn6vh2c+6k2Vse/DcvFnNrxM3lfl8ov2siU66fbu1r1VrWMvPyK8/nXPCv
        0AVHcLeAXEXjVmVsbG2bq+5OmXTO/h41fk9uv496vKEPzpUSx2N3N/GvclqF7XtR23tK3KnOtrJy55N6
        n5tmEof01z2HZ0namm2NPw8fF03Cx4dFrEw7UbcLcfdGEfCNHz3t124+FqzKXxnXpBWBpnceZtbdJahx
        csW5+2ONoMpUp+/XIo9Grdx9q1u1Kul8WcO9c9lvM0Sdulfzo3pf1LPa7qyZV8LVqn8ojurI5eNq1X+V
        QFL+/wDuheO20LVy/o0NB3nYhTqpDS8/yV6tPsX4wp/FKqKHEHhPvLhNq1NO3ntfVds5nPzbep4k7PXT
        3wrWnKdPjHm7LdjdNqXhdtTh8Y+c9O49tbb4kaJkaRr2l6fuHSb9Om7g6jjwvWpfahOgOsNgabmatf8A
        IYWJezL3Lq8lYt1nLl7+VH3fcPuP9oNU/mVz/Ct24691fb0TXLe/ezxuDK2Ju/AufKcfSbmVOOPKfusX
        vXs1l6OmfVCvPl5tHKXY97ampcRNfv8ACji/pc9ncZNJp0TxMu15CGqxpT75aj6Ovp86sY+bKnnw83nS
        IUb/AHD7j/aDVP5lc/wktlbhhGUp6FqcY09NZYdz/C7RwDqt3bc7E5W7kawnTwrGVOVaPW7L/FTs68Ne
        NenXMPemy9I12M49NMi7jUhk2/sXocrkPzZKle3P3Zuo9n3T8vfGwLmVuDYluvXmYt/z8vSo/SlWn3y1
        +Py5x+d9IECgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAE3u6s7M+Fxv43ZG6NexI5e2tnQtZcrNyPVbv5s61+TwlT20j0TnWP4kfZVCFdh3NG38bTey7rGq
        W40rlajuTJ8rP29NuzZhCn6X8oE+AAEce0hvXd29tds8GOFmV+p+6dVx6ZOv7jp4w23pk6yj5Xw/+xe6
        ZRtQ9PhKfm9PU543FqVzStHysmxjSzcmEOVjGjLp8tdr4Qh1eznLl4+z0tc4acPsfh3o+ddyciOdr+q5
        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
        3cWLmpcSo259V7AytSljRu09luMoRr5K3z+bbpH4ck2dud85lbP0HB0TReC+iaVpGFapZxsLD1edu1Zh
        T0RjGlnwVqgLPf8ATh6//wAJtN/71c/yXjXvwtw8vDhPpka/lm5/kqxAE4+K/e68a9/4N7A0COk7ExLl
        OmV3SbMrmXWn/Vuyl0/XCMa/FC3W9bz9yatl6pqudkalqWXcrdv5mZdldu3Z19Mpzl4yqxwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAeAAHgAHgeAAAAAAAAAAAA8oUjWvjzp9T8pLk/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5gAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAD/9k=
</value>
  </data>
</root>